
/*******************************************************************************
* Game Net Lib - Библиотека для организации сетевого взаимодействия в играх.   *
* Версия 1.0                                                                   *
* Автор - Зиатдинов Борис                                                      *
* Распостроняется свободно                                                     *
*******************************************************************************/

#define NL_MAX_MESSAGE   0x10000  // максимальный общий размер одного сообщения

// возможные типы передаваемых данных
enum {
NL_NONE,
NL_UI_8,   // unsigned char
NL_SI_8,   // signed char
NL_UI_16,  // unsigned short
NL_SI_16,  // signed short
NL_UI_32,  // unsigned long
NL_SI_32,  // signed long
NL_STR8,   // строка, 0-255 байт
NL_STR16,  // строка, 0-65535 байт
NL_BIN8,   // двоичные данные, 0-255 байт
NL_BIN16   // двоичные данные, 0-65535 байт
};

// номера ошибок
enum{
NL_ERROR_NO,
NL_ERROR_WINSOCK,
NL_ERROR_UNKNOWN_MESSAGE,
NL_ERROR_INCORRECT_MESSAGE,
NL_ERROR_MESSAGE
};

// структура для передачи двоичных данных
struct NL_TBinary{
  void *data;          // ссылка на двоичные данные
  unsigned short length;  // размер двоичных данных
};

// структура для хранения любого допустимого значения
union NL_Variable{
  unsigned char  ui_8;
  signed   char  si_8;
  unsigned short ui_16;
  signed   short si_16;
  unsigned long  ui_32;
  signed   long  si_32;
  char *     str;
  struct NL_TBinary bin;
};

// определение процедуры обработчика получения сообщения от клиента
// обработчик получает id клиента и посланные значения. Количество и типы значений
// определялись при задании обработчика сообщения
typedef void (*NLC_TInterpriterProcedure)(int id, union NL_Variable *variable);

// определение процедуры обработчика получения сообщения от сервера
// обработчик получает посланные значения. Количество и типы значений
// определялись при задании обработчика сообщения
typedef void (*NLS_TInterpriterProcedure)(union NL_Variable *variable);

// определение процедуры обработчика подключения нового клиента
// обработчик получает id подключения, и строковое представление адреса клиента
// обработчик возвращает флаг того, нужно ли его подключать (к примеру, этот адрес забанен)
typedef int (*NL_TClientConnect)(int id, char *host);

// определение процедуры обработчика отключения клиента
typedef void (*NL_TClientDisconnect)(int id);


// инициализация сервера, с установкой порта прослушивания, обработчиков событий подключения и
// отключения клиента
// возвращает максимальное количество подключений, или 0, если произошла ошибка
int NLS_Init(unsigned short port, NL_TClientConnect connect, NL_TClientDisconnect disconnect);

// завершение работы сервера
void NLS_Close();

// инициализация клиента, с установкой соединения с сервером host:port
// возвращает флаг успеха
int NLC_Init(unsigned short port, char *host);

// завершение работы клиента
void NLC_Close();


// установка формата сообщения от клиента. процедуре передается тип сообщения,
// процедура-обработчик сообщения (опционально), количество параметров и их типы.
void NLS_SetInterpriter(int message, NLS_TInterpriterProcedure proc, int count, ...);

// установка формата сообщения от сервера. процедуре передается тип сообщения,
// процедура-обработчик сообщения(опционально), количество параметров и их типы.
void NLC_SetInterpriter(int message, NLC_TInterpriterProcedure proc, int count, ...);

// отправка сообщения от сервера к клиенту
// процедуре передается id клиента, тип сообщения и параметры сообщения, в соответствии с
// определением сообщения (определение на стороне клиента
int NLS_Message(int id, unsigned char message, ...);

// отправка сообщения от клиента к серверу
// процедуре передается тип сообщения и параметры сообщения, в соответствии с
// определением сообщения (определение на стороне клиента
int NLC_Message(unsigned char message, ...);

// обновление состояния всех дескрипторов, подключение новых клиентов, получение сообщений от
// клиентов
void NLS_Refresh();

// получение сообщений от сервера
// возвращает состояние подключения к серверу. Если подключение есть, возвращает true, иначе false
int NLC_Refresh();

// отключение клиента
void NLS_Disconnect(int id);

// отключение от сервера
void NLC_Disconnect();

// функция возвращает номер ошибки последнего действия. NL_ERROR_NO (0) если ошибки не было
int NL_Error();

// функция возвращает описание ошибки. Одному номеру ошибки могут соответствовать разные описания
char *NL_ErrorDescription();
